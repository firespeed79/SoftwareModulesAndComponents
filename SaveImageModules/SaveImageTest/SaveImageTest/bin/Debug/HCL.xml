<?xml version="1.0"?>
<doc>
<assembly>
<name>
HCL
</name>
</assembly>
<members>
<member name="T:HCL.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:HCL.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:HCL.My.Resources.Resources.Culture">
<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member>
<member name="T:HCL.DelegateModule">
 <summary>
 声明委托的模块
 </summary>
</member>
<member name="T:HCL.DelegateModule.TextBoxShowInfoCallBack">
 <summary>
 显示TextBox的值得委托
 </summary>
 <param name="tbx"></param>
 <param name="info"></param>
 <param name="backcolor"></param>
</member>
<member name="T:HCL.DelegateModule.LabelShowInfoCallBack">
 <summary>
 显示Label值得委托
 </summary>
 <param name="lb"></param>
 <param name="info"></param>
 <param name="backcolor"></param>
</member>
<member name="T:HCL.DelegateModule.GroupBoxShowInfoCallBack">
 <summary>
 设置Groupbox的Text属性的委托
 </summary>
 <param name="grp"></param>
 <param name="info"></param>
</member>
<member name="T:HCL.DelegateModule.InitTableLayoutPanelCallBack">
 <summary>
 平均分布TableLayoutPanel
 </summary>
 <param name="tlp"></param>
</member>
<member name="T:HCL.DelegateModule.InitTableLayoutPanelAndAddCtrlCallBack">
 <summary>
 平均分布TableLayoutPanel
 </summary>
 <param name="tlp"></param>
</member>
<member name="M:HCL.DelegateModule.tlpInitAndAddCtrl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Int32,System.Int32,System.Boolean)">
 <summary>
 初始化TableyoutPanel并且向TableyoutPanel中添加控件的委托
 </summary>
 <param name="tlp">TableLayoutpanel控件</param>
 <param name="Ctrl">需要添加的控件</param>
 <param name="col">列序号</param>
 <param name="row">行序号</param>
 <param name="AutoArrange">是否自动排列</param>
</member>
<member name="T:HCL.DelegateModule.TableLayoutPanelAddCtrlCallBack">
 <summary>
 向TableyoutPanel中添加控件的委托
 </summary>
 <param name="tlp"></param>
 <param name="ctrl"></param>
 <param name="col"></param>
 <param name="row"></param>
</member>
<member name="M:HCL.DelegateModule.TableLayoutPanelAddCtrl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Int32,System.Int32)">
 <summary>
 向TableyoutPanel中添加控件
 </summary>
 <param name="tlp">TableLayoutpanel控件</param>
 <param name="ctrl">需要添加的控件</param>
 <param name="col">列序号</param>
 <param name="row">行序号</param>
</member>
<member name="M:HCL.DelegateModule.TlpShowBig(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Int32)">
 <summary>
 放大显示TLP中的某个单元格
 </summary>
 <param name="tlp">TableLayoutPanel控件</param>
 <param name="r">行号</param>
 <param name="c">列号</param>
</member>
<member name="M:HCL.DelegateModule.SetButtonEnable(System.Windows.Forms.Button,System.Boolean)">
 <summary>
 设置Button的Enable属性
 </summary>
 <param name="btn"></param>
 <param name="bool"></param>
</member>
<member name="T:HCL.DelegateModule.BindDataToDGVCallBack">
 <summary>
 将DataTable数据绑定到DGV中的委托
 </summary>
 <param name="dgv"></param>
 <param name="dt"></param>
</member>
<member name="M:HCL.DelegateModule.BindDataToDGV(System.Windows.Forms.DataGridView,System.Data.DataTable)">
 <summary>
 将datatable中的数据绑定到DGV中
 </summary>
 <param name="dgv"></param>
 <param name="dt"></param>
</member>
<member name="T:HCL.DelegateModule.GetDataTableFromDGVCallBack">
 <summary>
 从DGV中获取DataTable的委托
 </summary>
 <param name="dgv"></param>
 <returns></returns>
</member>
<member name="M:HCL.DelegateModule.GetDataTableFromDGV(System.Windows.Forms.DataGridView)">
 <summary>
 从DGV中获取DataTable数据
 </summary>
 <param name="dgv"></param>
 <returns></returns>
</member>
<member name="T:HCL.DelegateModule.CleraDGVCalBack">
 <summary>
 清空DGV的委托
 </summary>
 <param name="dgv"></param>
</member>
<member name="T:HCL.DelegateModule.SetDGVColumnsValueCallBack">
 <summary>
 修改DGV指定行指定列的值
 </summary>
 <param name="dgv"></param>
 <param name="RowValue"></param>
 <param name="colStartIndex"></param>
</member>
<member name="M:HCL.DelegateModule.SetDGVColumnsValue(System.Windows.Forms.DataGridView,System.Object,System.Int32,System.String[])">
 <summary>
 修改DGV指定行指定列的值
 </summary>
 <param name="dgv">DGV</param>
 <param name="RowValue">首行名称</param>
 <param name="colStartIndex">起始列</param>
 <param name="colValue">列值</param>
</member>
<member name="T:HCL.DelegateModule.DataGridViewColumnAddValueCallBack">
 <summary>
 个DGV添加列的委托
 </summary>
 <param name="dgv"></param>
 <param name="ColumnCount"></param>
 <param name="Value"></param>
</member>
<member name="T:HCL.DelegateModule.TabPageAddControlCallBack">
 <summary>
 Tbapage添加控件委托
 </summary>
 <param name="tpg"></param>
 <param name="ctrl"></param>
</member>
<member name="M:HCL.DelegateModule.TabPageAddCtrl(System.Windows.Forms.TabPage,System.Windows.Forms.Control)">
 <summary>
 Tbapage添加控件
 </summary>
 <param name="tpg"></param>
 <param name="ctrl"></param>
</member>
<member name="M:HCL.IO.Net.ClientConnectEventArgs.#ctor">
<summary>
 默认构造函数 
</summary>
</member>
<member name="P:HCL.IO.Net.ClientConnectEventArgs.IsConnect">
 <summary>
 获取或设置客户端是否连接到服务器
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.ClientConnectEventArgs.ClientIPAddress">
 <summary>
 获取或设置客户端的IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.ClientConnectEventArgs.ClientPort">
 <summary>
 获取或设置客户端的端口号
 </summary>
 <returns></returns>
</member>
<member name="T:HCL.IO.Net.AsyncClient">
 <summary>
 基于System.Net.Sockets开发的TCP、UDP通信的客户端类。
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncClient.#ctor(System.String,System.Int32,System.Int32)">
 <summary>
 客户端构造函数
 </summary>
 <param name="_IPAddress">主机IP地址</param>
 <param name="_Port">主机端口号</param>
</member>
<member name="P:HCL.IO.Net.AsyncClient.IP">
 <summary>
 IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncClient.Port">
 <summary>
 端口号
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncClient.IsConnect">
 <summary>
 获取连接状态
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncClient.MyEncoding">
 <summary>
 获取或设置同行编码格式
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.Net.AsyncClient.ConnectCallBackFun(System.IAsyncResult)">
 <summary>
 连接远程主机的回调函数
 </summary>
 <param name="ar"></param>
</member>
<member name="M:HCL.IO.Net.AsyncClient.SendCallBackFun(System.IAsyncResult)">
 <summary>
 发送数据的回调函数
 </summary>
 <param name="ar"></param>
</member>
<member name="M:HCL.IO.Net.AsyncClient.ReceiveCallBackFun(System.IAsyncResult)">
 <summary>
 接收数据的回调函数
 </summary>
 <param name="ar"></param>
 
</member>
<member name="T:HCL.IO.Net.AsyncClient.ReceiveHandler">
 <summary>
 接收数据事件的委托
 </summary>
</member>
<member name="E:HCL.IO.Net.AsyncClient.ReceiveDataEvent">
 <summary>
 接收到数据后触发的事件
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncClient.StartConnect">
 <summary>
 连接远程主机
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.Net.AsyncClient.Send(System.String)">
 <summary>
 发送数据
 </summary>
 <param name="value">需要发送的数据</param>
</member>
<member name="M:HCL.IO.Net.AsyncClient.SendHex(System.Byte[])">
 <summary>
 以16进制字节数组发送
 </summary>
 <param name="e"></param>
</member>
<member name="M:HCL.IO.Net.AsyncClient.CloseClient">
 <summary>
 关闭客户端,释放内存资源
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncClient.DisConnect(System.Boolean)">
 <summary>
 断开连接
 </summary>
 <param name="reuse">是否继续使用当前Socket</param>
</member>
<member name="T:HCL.IO.Net.StateObj">
 <summary>
 用于保存从远程设备接受的数据
 </summary>
</member>
<member name="T:HCL.IO.Net.AsyncServer">
 <summary>
 基于System.Net.Sockets开发的TCP通信的服务器类。
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncServer.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Server的构造函数
 </summary>
 <param name="IP">IP地址</param>
 <param name="Port">端口号</param>
 <param name="MaxCount">指定服务器最大链接数量</param>
 <param name="_BufferSize">缓冲区大小</param>
</member>
<member name="P:HCL.IO.Net.AsyncServer.ServerIP">
 <summary>
 获取IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.SreverPort">
 <summary>
 获取端口号
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.BufferSize">
 <summary>
 定义接收缓冲区的大小
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.IsListening">
 <summary>
 获取服务器是否在侦听状态
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.LinkCount">
 <summary>
 获取连接到服务器的客户端的数量
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.IpItems(System.Int32)">
 <summary>
 获取连接到服务器上的所有客户端的ip地址
 </summary>
 <param name="index"></param>
 <returns></returns> 
</member>
<member name="P:HCL.IO.Net.AsyncServer.Clients(System.String)">
 <summary>
 获取已连接的客户端
 </summary>
 <param name="ip"></param>
 <returns></returns>
</member>
<member name="P:HCL.IO.Net.AsyncServer.MyEncoding">
 <summary>
 获取或设置通信使用的编码格式
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.Net.AsyncServer.BeginListen">
 <summary>
 开始侦听网络上可用设备
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncServer.SendData(System.Net.Sockets.Socket,System.String)">
 <summary>
 发送字符串数据
 </summary>
 <param name="handler">客户端的句柄</param>
 <param name="data">字符串数据</param>
</member>
<member name="M:HCL.IO.Net.AsyncServer.SendData(System.Net.Sockets.Socket,System.Byte[])">
 <summary>
 以字节形式发送
 </summary>
 <param name="handler">客户端的句柄</param>
 <param name="bytes">需要发送的字节</param>
</member>
<member name="M:HCL.IO.Net.AsyncServer.SendData(System.Net.Sockets.Socket,System.Drawing.Bitmap)">
 <summary>
 发送图片
 </summary>
 <param name="handler">客户端的句柄</param>
 <param name="img">需要发送的图片</param>
</member>
<member name="M:HCL.IO.Net.AsyncServer.StopListening">
 <summary>
 停止侦听
 </summary>
</member>
<member name="M:HCL.IO.Net.AsyncServer.ContainsIp(System.String)">
 <summary>
 判断ipaddr这个IP地址的客户端是否在服务器连接列表中
 </summary>
 <param name="ipaddr">IP地址</param>
 <returns></returns>
</member>
<member name="M:HCL.IO.Net.AsyncServer.ReceiveCallBack(System.IAsyncResult)">
 <summary>
 接收数据函数
 </summary>
 <param name="ar">回调参数</param>
</member>
<member name="M:HCL.IO.Net.AsyncServer.BeginSendCallBack(System.IAsyncResult)">
 <summary>
 异步发送的回调函数
 </summary>
 <param name="ar"></param>
</member>
<member name="T:HCL.IO.Net.AsyncServer.ReceiveHandler">
 <summary>
 接收数据事件的委托
 </summary>
</member>
<member name="E:HCL.IO.Net.AsyncServer.ReceiveDataEvent">
 <summary>
 接收到数据后触发的事件
 </summary>
</member>
<member name="E:HCL.IO.Net.AsyncServer.ClientConnectEvent">
 <summary>
 客户端连接\断开服务器事件
 </summary>
</member>
<member name="T:HCL.IO.Net.AsyncServer.ReceiveMessageEventArgs">
 <summary>
 收到客户端的数据信息
 </summary>
</member>
<member name="P:HCL.IO.Net.AsyncServer.ReceiveMessageEventArgs.DataBytes">
 <summary>
 接收到的字节型数据
 </summary>
 <returns></returns>
</member>
<member name="T:HCL.IO.Net.StateInfo">
 <summary>
 表示客户端的数据信息
 </summary>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.#ctor(System.String,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity,System.Int32,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="_portname">端口号</param>
 <param name="_baudrate">波特率</param>
 <param name="_databit">数据位</param>
 <param name="_stopbit">停止位</param>
 <param name="_parity">校验方式</param>
 <param name="_Retries">重复尝试次数</param>
 <param name="_ReadTimeout">超时时间（ms）</param>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.PortName">
 <summary>
 获取或设置端口号
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.BaudRate">
 <summary>
 获取或设置波特率
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.DataBit">
 <summary>
 获取或设置数据位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.StopBit">
 <summary>
 获取或设置停止位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.Parity">
 <summary>
 获取或设置校验方式
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.Retries">
 <summary>
 获取或设置错误重复尝试次数
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.ReadTimeout">
 <summary>
 获取或设置超时时间（ms）
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.IsOpend">
 <summary>
 获取Modbus通讯是否打开
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.Open">
 <summary>
 建立连接
 </summary>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.Close">
 <summary>
 关闭主站
 </summary>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUMaster.ReadRegist(System.Byte,System.UInt16,System.UInt16)">
 <summary>
 读取从站寄存器地址
 </summary>
 <param name="m_slaveID">从站站号</param>
 <param name="m_startAddress">寄存器首地址</param>
 <param name="m_numOfPoints">读取寄存器数量</param>
 <returns></returns>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.ModbusRTU.ModbusRTUSlave.#ctor(System.String,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity,System.Byte)">
 <summary>
 ModbusRTU格式从站通信
 </summary>
 <param name="_portname">串口名称</param>
 <param name="_baudrate">波特率</param>
 <param name="_databit">数据位</param>
 <param name="_stopbit">停止位</param>
 <param name="_parity">奇偶校验</param>
 <param name="_stationnum">站号</param>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.PortName">
 <summary>
 获取或设置串口名称
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.BaudRate">
 <summary>
 获取或设置波特率
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.StopBits">
 <summary>
 获取或设置停止位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.DataBits">
 <summary>
 获取或设置数据位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.Parity">
 <summary>
 获取或设置奇偶校验位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.BufferSize">
 <summary>
 获取或设置数据缓冲池的大小
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SerialPortsCommunication.MySerialPort.IsOpened">
 <summary>
 获取串口打开状态
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.MySerialPort.#ctor(System.String,System.Int32,System.IO.Ports.StopBits,System.Int32,System.IO.Ports.Parity,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="_PortName">串口名称</param>
 <param name="_BaudRate">波特率</param>
 <param name="_StopBit">停止位</param>
 <param name="_DataBits">数据位</param>
 <param name="_parity">校验方式</param>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.MySerialPort.OpenSerialPort">
 <summary>
 打开一个串口，如果打开成功了则返回1，如果打开失败则返回0
 如果打开出错则返回-1
 </summary>
 <returns>
 </returns>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.MySerialPort.SendData(System.String)">
 <summary>
 发送数据
 </summary>
 <param name="values"></param>需要发送的数据
</member>
<member name="M:HCL.IO.SerialPortsCommunication.MySerialPort.Close">
 <summary>
 关闭串口，销毁内存资源
 </summary>
</member>
<member name="M:HCL.IO.SerialPortsCommunication.MySerialPort.m_SerialPort_ReceiveData(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
 <summary>
 接受数据事件
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:HCL.IO.SNIOCard.OutputEventArgs.OutputChanel">
 <summary>
 输出通道
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.OutputEventArgs.Chanel0Value">
 <summary>
 输出通道0的值
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.OutputEventArgs.Chanel1Value">
 <summary>
 输出通道1的值
 </summary>
 <returns></returns>
</member>
<member name="T:HCL.IO.SNIOCard.OutputEventArgs.Chanels">
 <summary>
 枚举输出通道
 </summary>
</member>
<member name="T:HCL.IO.SNIOCard.AC6652">
 <summary>
 双诺板卡，AC6652
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.#ctor(System.Int32,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.#ctor(System.Int32,System.Int32,System.Threading.ThreadPriority,System.Threading.ThreadPriority)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="_InputThreadPriority">输入线程等级</param>
 <param name="_OutPutThreadPriority">输出线程等级</param>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.#ctor(System.Int32,System.Int32,HCL.IO.SNIOCard.AC6652.InputChanel,HCL.IO.SNIOCard.AC6652.OutputChanel)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="IChanel">输入通道</param>
 <param name="OChanel">输出通道</param>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.#ctor(System.Int32,System.Int32,HCL.IO.SNIOCard.AC6652.InputChanel,HCL.IO.SNIOCard.AC6652.OutputChanel,System.Threading.ThreadPriority,System.Threading.ThreadPriority)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="IChanel">输入通道</param>
 <param name="OChanel">输出通道</param>
 <param name="_InputThreadPriority">输入线程等级</param>
 <param name="_OutPutThreadPriority">输出线程等级</param>
</member>
<member name="T:HCL.IO.SNIOCard.AC6652.OutputChanel">
 <summary>
 枚举需要用到的输出通道
 </summary>
</member>
<member name="T:HCL.IO.SNIOCard.AC6652.InputChanel">
 <summary>
 表示需要用到的输入通道
 </summary>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.IsLinked">
 <summary>
 获取连接板卡的状态
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.FilteringTime">
 <summary>
 获取或设置滤波时间
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.SleepTime">
 <summary>
 设置或获取输入输出线程循扫暂停时间
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.UseInputChanel">
 <summary>
 获取当前使用的输入通道
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.UseOutPutChanel">
 <summary>
 获取当前使用到的输出通道
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.AC6652.OutputChanelState(HCL.IO.SNIOCard.Chanel_PortName)">
 <summary>
 获取输出点位的状态
 </summary>
 <param name="Portname"></param>
 <returns></returns>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.LinkCard">
 <summary>
 连接板卡，如果连接成功则返回True，连接失败返回False
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.Output(HCL.IO.SNIOCard.Chanel_PortName,System.Boolean)">
 <summary>
 输出函数
 </summary>
 <param name="PortName">输出的I/O端口名称</param>
 <param name="State">输出状态（True为高电平,False为低电平）</param>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.Close">
 <summary>
 关闭板卡
 </summary>
</member>
<member name="E:HCL.IO.SNIOCard.AC6652.InputChanel0_Rise">
 <summary>
 通道0输入上升沿事件
 </summary>
</member>
<member name="E:HCL.IO.SNIOCard.AC6652.InputChanel1_Rise">
 <summary>
 通道1输入上升沿事件
 </summary>
</member>
<member name="E:HCL.IO.SNIOCard.AC6652.InputChanel0_Fall">
 <summary>
 通道0输入下降沿事件
 </summary>
</member>
<member name="E:HCL.IO.SNIOCard.AC6652.InputChanel1_Fall">
 <summary>
 通道1输入下降沿事件
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH0_InputFunction">
 <summary>
 单通道0输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH1_InputFunction">
 <summary>
 单通道1输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH0_CH1_InputFunction">
 <summary>
 双通道输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH0_OutputFunction">
 <summary>
 单通道0输出函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH1_OutputFunction">
 <summary>
 单通道1输出函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.AC6652.CH0_CH1_OutputFunction">
 <summary>
 双通道输出函数
 </summary>
</member>
<member name="T:HCL.IO.SNIOCard.OutputEventHandler">
 <summary>
 输出事件的委托
 </summary>
 <param name="e"></param>
</member>
<member name="T:HCL.IO.SNIOCard.ChanelInputRaiseEventHandler">
 <summary>
 通道输入的上升沿事件委托
 </summary>
 <param name="port"></param>
</member>
<member name="T:HCL.IO.SNIOCard.ChanelInputFullEventHandler">
 <summary>
 通道输入的下降沿事件委托
 </summary>
 <param name="port"></param>
</member>
<member name="T:HCL.IO.SNIOCard.AC6654">
 <summary>
 双诺板卡，AC6654
 </summary>
</member>
<member name="T:HCL.IO.SNIOCard.Mp441">
 <summary>
 双诺板卡，MP441
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.#ctor(System.Int32,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.#ctor(System.Int32,System.Int32,System.Threading.ThreadPriority,System.Threading.ThreadPriority)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="_InputThreadPriority">输入线程等级</param>
 <param name="_OutPutThreadPriority">输出线程等级</param>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.#ctor(System.Int32,System.Int32,HCL.IO.SNIOCard.Mp441.InputChanel,HCL.IO.SNIOCard.Mp441.OutputChanel)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="IChanel">输入通道</param>
 <param name="OChanel">输出通道</param>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.#ctor(System.Int32,System.Int32,HCL.IO.SNIOCard.Mp441.InputChanel,HCL.IO.SNIOCard.Mp441.OutputChanel,System.Threading.ThreadPriority,System.Threading.ThreadPriority)">
 <summary>
 构造函数
 </summary>
 <param name="_SleepTime">输入输出线程睡眠时间</param>
 <param name="_filteringTime">输入的滤波时间</param>
 <param name="IChanel">输入通道</param>
 <param name="OChanel">输出通道</param>
 <param name="_InputThreadPriority">输入线程等级</param>
 <param name="_OutPutThreadPriority">输出线程等级</param>
</member>
<member name="T:HCL.IO.SNIOCard.Mp441.OutputChanel">
 <summary>
 枚举需要用到的输出通道
 </summary>
</member>
<member name="T:HCL.IO.SNIOCard.Mp441.InputChanel">
 <summary>
 表示需要用到的输入通道
 </summary>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.IsLinked">
 <summary>
 获取连接板卡的状态
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.FilteringTime">
 <summary>
 获取或设置滤波时间
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.SleepTime">
 <summary>
 设置或获取输入输出线程循扫暂停时间
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.UseInputChanel">
 <summary>
 获取当前使用的输入通道
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.NewProperty">
 <summary>
 获取当前使用到的输出通道
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.SNIOCard.Mp441.OutputChanelState(System.String)">
 <summary>
 获取输出点位的状态
 </summary>
 <param name="Portname"></param>
 <returns></returns>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.LinkCard">
 <summary>
 连接板卡，如果连接成功则返回True，连接失败返回False
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.Close">
 <summary>
 关闭板卡
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH0_InputFunction">
 <summary>
 单通道0输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH1_InputFunction">
 <summary>
 单通道1输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH0_CH1_InputFunction">
 <summary>
 双通道输入函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH0_OutputFunction">
 <summary>
 单通道0输出函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH1_OutputFunction">
 <summary>
 单通道1输出函数
 </summary>
</member>
<member name="M:HCL.IO.SNIOCard.Mp441.CH0_CH1_OutputFunction">
 <summary>
 双通道输出函数
 </summary>
</member>
<member name="M:HCL.IO.Files.CSVReadAndWrite.#ctor">
 <summary>
 构造函数,最多读取10列数据
 </summary>
</member>
<member name="M:HCL.IO.Files.CSVReadAndWrite.#ctor(System.String)">
 <summary>
 构造函数,最多读取10列数据
 </summary>
 <param name="_FileName">文件路径</param>
</member>
<member name="M:HCL.IO.Files.CSVReadAndWrite.#ctor(System.String,System.Text.Encoding)">
 <summary>
 构造函数,最多读取10列数据
 </summary>
 <param name="_FileName">文件路径</param>
 <param name="_Encoding">字符编码</param>
</member>
<member name="M:HCL.IO.Files.CSVReadAndWrite.#ctor(System.String,System.Text.Encoding,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="_FileName">文件路径</param>
 <param name="_Encoding">字符编码</param>
 <param name="_Column">读取CSV文件中的列的数量</param>
</member>
<member name="P:HCL.IO.Files.CSVReadAndWrite.FileName">
 <summary>
 获取或设置文件名称
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.IO.Files.CSVReadAndWrite.MyEncoding">
 <summary>
 获取或设置编码方式
 </summary>
 <returns></returns>
</member>
<member name="F:HCL.IO.Files.CSVReadAndWrite.m_EmptyLineCount">
 <summary>
 获取或设置连续允许空的行
 </summary>
</member>
<member name="M:HCL.IO.Files.CSVReadAndWrite.GetArrayList">
 <summary>
 获取文件中的数据以ArrayList方式返回
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.IO.File.MultipleCSVFileRW.WriteFile(System.String,System.String)">
 <summary>
 将数据写入到CSV文件中
 </summary>
 <param name="Path"></param>CSV文件路径
 <param name="newDataLine"></param>需要写入数据，每个数据用“,”号隔开
</member>
<member name="T:HCL.SNModule">
 <summary>
 双诺板卡模块
 </summary>
</member>
<member name="M:HCL.Print.PrintDataTable.Print">
 <summary>
 打印
 </summary>
</member>
<member name="E:HCL.Ctrl_Mp441.SetOutputEvent">
 <summary>
 设置输出事件
 </summary>
 <param name="PortName"></param>端口名称
 <param name="State"></param>端口状态
</member>
<member name="M:HCL.Ctrl_Mp441.Chanel0_InputRise(System.Int32)">
 <summary>
 输入通道0上升沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_Mp441.Chanel1_InputRise(System.Int32)">
 <summary>
 通道1上升沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_Mp441.Chanel0_InputFall(System.Int32)">
 <summary>
 通道0下降沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_Mp441.Chanel1_InputFall(System.Int32)">
 <summary>
 通道1下降沿
 </summary>
 <param name="val"></param>
</member>
<member name="P:HCL.DGVPanel.HeadText">
 <summary>
 界面标题
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.DGVPanel.dgvPanelColumnName(System.Int32)">
 <summary>
 获取或设置DGV中每列的名称
 </summary>
 <param name="i"></param>
 <returns></returns>
</member>
<member name="P:HCL.DGVPanel.GetDGV">
 <summary>
 获取控件中的DataGridView控件
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.PageControl.PageIndex">
 <summary>
 当前页数
 </summary>
 <returns></returns>
</member>
<member name="F:HCL.PageControl._pageSize">
 <summary>
 每页的记录数量
 </summary>
</member>
<member name="F:HCL.PageControl._AllRecordCount">
 <summary>
 总的记录数量
 </summary>
</member>
<member name="F:HCL.PageControl._AllPageCount">
 <summary>
 总页数
 </summary>
</member>
<member name="P:HCL.PageControl.FirstPageEnable">
 <summary>
 获取第一页使能
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.PageControl.LastPageEnable">
 <summary>
 获取最后一页使能
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.PageControl.PrevIndexPageEnable">
 <summary>
 获取前一页使能
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.PageControl.NextIndexPageEnable">
 <summary>
 获取后一页使能
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.PageControl.InitCtr">
 <summary>
 获得总的记录数据后初始化控件
 </summary>
</member>
<member name="M:HCL.PageControl.PrevIndexPage">
 <summary>
 前一页
 </summary>
</member>
<member name="M:HCL.PageControl.NextIndexPage">
 <summary>
 后一页
 </summary>
</member>
<member name="M:HCL.PageControl.FirstPage">
 <summary>
 第一页
 </summary>
</member>
<member name="E:HCL.PageControl.OnPageChange">
 <summary>
 页码变化是触发的事件
 </summary>
</member>
<member name="M:HCL.PageControl.SetFormCtrEnable">
 <summary>
 使窗体控件全部可用
 </summary>
</member>
<member name="M:HCL.PageControl.InitCtrDisable">
 <summary>
 初始化所有控件
 </summary>
</member>
<member name="M:HCL.PageControl.GetPageCount">
 <summary>
 计算总共页数
 </summary>
</member>
<member name="M:HCL.PageControl.DrawControl(System.Boolean)">
 <summary>
 根据不同的情况改变控件状态
 </summary>
 <param name="Drawing"></param>
</member>
<member name="M:HCL.PageControl.btnLinkFirst_Click(System.Object,System.EventArgs)">
 <summary>
 转到首页
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.btnLinkLast_Click(System.Object,System.EventArgs)">
 <summary>
 转到尾页
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.btnLinkPrevious_Click(System.Object,System.EventArgs)">
 <summary>
 前一页
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.btnLinkNext_Click(System.Object,System.EventArgs)">
 <summary>
 后一页
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.btnGo_Click(System.Object,System.EventArgs)">
 <summary>
 跳转
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.tbxGoPageIndex_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 当跳转文本框获得焦点时按下回车键执行跳转
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.tbxGoPageIndex_TextChanged(System.Object,System.EventArgs)">
 <summary>
 跳转文本框输入限制
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.tbxPageSize_TextChanged(System.Object,System.EventArgs)">
 <summary>
 每页条数改变时
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.PageControl.tbxPageSize_Leave(System.Object,System.EventArgs)">
 <summary>
 当光标离开控件时
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:HCL.SerialPortUI.PortName">
 <summary>
 获取或设置串口名称
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.SerialPortUI.BaudRate">
 <summary>
 获取或设置波特率
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.SerialPortUI.DataBits">
 <summary>
 获取或设置数据位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.SerialPortUI.Stopbits">
 <summary>
 获取或设置停止位
 </summary>
 <returns></returns>
</member>
<member name="P:HCL.SerialPortUI.Parity">
 <summary>
 获取或设置校验方式
 </summary>
 <returns></returns>
</member>
<member name="M:HCL.SerialPortUI.InitUI(System.String,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity)">
 <summary>
 设置界面
 </summary>
 <param name="_portname"></param>串口名称
 <param name="_baudrate"></param>波特率
 <param name="_databit"></param>数据位
 <param name="_stopbit"></param>停止位
 <param name="_parity"></param>校验方式
</member>
<member name="M:HCL.SerialPortUI.bt_Comfirm_Click(System.Object,System.EventArgs)">
 <summary>
 确认
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:HCL.SerialPortUI.bt_Cancel_Click(System.Object,System.EventArgs)">
 <summary>
 取消
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:HCL.Ctrl_AC6652.SetOutputEvent">
 <summary>
 设置输出事件
 </summary>
 <param name="PortName"></param>端口名称
 <param name="State"></param>端口状态
</member>
<member name="M:HCL.Ctrl_AC6652.Chanel0_InputRise(System.Int32)">
 <summary>
 输入通道0上升沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_AC6652.Chanel1_InputRise(System.Int32)">
 <summary>
 通道1上升沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_AC6652.Chanel0_InputFall(System.Int32)">
 <summary>
 通道0下降沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.Ctrl_AC6652.Chanel1_InputFall(System.Int32)">
 <summary>
 通道1下降沿
 </summary>
 <param name="val"></param>
</member>
<member name="M:HCL.IPInputBox.#ctor(System.String)">
 <summary>
 构造函数
 </summary>
 <param name="str"></param>默认的数值
</member>
</members>
</doc>
